
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package RAnalizador;

import java.util.LinkedList;
import java_cup.runtime.Symbol;
import AST.*;
import AST.Entorno.*;
import AST.Entorno.Valores.ValorEntero;
import AST.Expresion.*;
import AST.Expresion.Operaciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SSimbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public SParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\003\005\000\002\003\003\000\002\005\006" +
    "\000\002\005\006\000\002\005\005\000\002\005\010\000" +
    "\002\006\004\000\002\006\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\012\004\005\005\007\035\006\041\013\001" +
    "\002\000\006\002\ufffd\041\ufffd\001\002\000\004\006\043" +
    "\001\002\000\004\016\036\001\002\000\004\016\021\001" +
    "\002\000\006\002\000\041\013\001\002\000\004\002\020" +
    "\001\002\000\012\004\005\005\007\035\006\041\015\001" +
    "\002\000\012\004\ufff7\005\ufff7\035\ufff7\041\ufff7\001\002" +
    "\000\006\002\uffff\041\013\001\002\000\012\004\ufff8\005" +
    "\ufff8\035\ufff8\041\ufff8\001\002\000\012\004\005\005\007" +
    "\035\006\041\015\001\002\000\006\002\ufffe\041\ufffe\001" +
    "\002\000\004\002\001\001\002\000\006\016\022\020\023" +
    "\001\002\000\006\016\022\020\023\001\002\000\014\007" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\017\ufff2\001\002\000\012" +
    "\012\030\013\026\014\027\017\025\001\002\000\006\002" +
    "\ufffc\041\ufffc\001\002\000\006\016\022\020\023\001\002" +
    "\000\006\016\022\020\023\001\002\000\006\016\022\020" +
    "\023\001\002\000\014\007\ufff6\012\ufff6\013\ufff6\014\027" +
    "\017\ufff6\001\002\000\014\007\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\017\ufff4\001\002\000\014\007\ufff5\012\ufff5\013\ufff5" +
    "\014\027\017\ufff5\001\002\000\012\012\030\013\026\014" +
    "\027\017\035\001\002\000\014\007\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\017\ufff3\001\002\000\004\017\037\001\002\000" +
    "\004\006\040\001\002\000\006\016\022\020\023\001\002" +
    "\000\012\007\042\012\030\013\026\014\027\001\002\000" +
    "\006\002\ufff9\041\ufff9\001\002\000\010\007\045\016\022" +
    "\020\023\001\002\000\012\007\046\012\030\013\026\014" +
    "\027\001\002\000\006\002\ufffa\041\ufffa\001\002\000\006" +
    "\002\ufffb\041\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\012\002\010\003\007\005\003\006\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\015\001\001\000\002\001" +
    "\001\000\006\003\013\005\003\001\001\000\002\001\001" +
    "\000\004\006\015\001\001\000\002\001\001\000\004\005" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\023\001\001\000\004\004\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\032" +
    "\001\001\000\004\004\031\001\001\000\004\004\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    LinkedList<String> errores = null;

    public void setErrores(LinkedList<String> lista) {
    }

    public void syntax_error(Symbol s)
    {        
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {      
    }

    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SParser$actions {



  private final SParser parser;

  /** Constructor */
  CUP$SParser$actions(SParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SParser$do_action_part00000000(
    int                        CUP$SParser$act_num,
    java_cup.runtime.lr_parser CUP$SParser$parser,
    java.util.Stack            CUP$SParser$stack,
    int                        CUP$SParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SParser$result;

      /* select the action based on the action number */
      switch (CUP$SParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ROOT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SParser$stack.elementAt(CUP$SParser$top-1)).value;
		RESULT = start_val;
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-1)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SParser$parser.done_parsing();
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ROOT ::= S 
            {
              Nodo RESULT =null;
		 System.out.println("Done!");
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ROOT ::= SALTOS S 
            {
              Nodo RESULT =null;
		 System.out.println("Done2!");
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-1)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= S SALTOS INS 
            {
              Nodo RESULT =null;
		 
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= INS 
            {
              Nodo RESULT =null;
		 
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INS ::= print par_open E par_close 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SParser$stack.elementAt(CUP$SParser$top-1)).value;
		System.out.println(((ValorEntero)a.ejecutar()).getCadena());
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("INS",3, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-3)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INS ::= function cor_open E cor_close 
            {
              Nodo RESULT =null;
		System.out.println("Function");
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("INS",3, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-3)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INS ::= function cor_open cor_close 
            {
              Nodo RESULT =null;
		System.out.println("Funciont2");
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("INS",3, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INS ::= iff par_open par_close cor_open E cor_close 
            {
              Nodo RESULT =null;
		System.out.println("If");
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("INS",3, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-5)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SALTOS ::= SALTOS salto 
            {
              Nodo RESULT =null;

              CUP$SParser$result = parser.getSymbolFactory().newSymbol("SALTOS",4, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-1)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SALTOS ::= salto 
            {
              Nodo RESULT =null;

              CUP$SParser$result = parser.getSymbolFactory().newSymbol("SALTOS",4, ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= E plus E 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SParser$stack.elementAt(CUP$SParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SParser$stack.peek()).value;
		 System.out.print("+") ; RESULT = new Suma((Expresion)a,(Expresion)b);
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= E minus E 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SParser$stack.elementAt(CUP$SParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SParser$stack.peek()).value;
		System.out.print("-") ; 
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= E mult E 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SParser$stack.elementAt(CUP$SParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SParser$stack.peek()).value;
		 System.out.print("*") ; 
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= par_open E par_close 
            {
              Nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-1)).right;
		Nodo x = (Nodo)((java_cup.runtime.Symbol) CUP$SParser$stack.elementAt(CUP$SParser$top-1)).value;
		 
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SParser$stack.elementAt(CUP$SParser$top-2)), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= num 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SParser$stack.peek()).value;
		System.out.print(s); RESULT = new Entero(s);
              CUP$SParser$result = parser.getSymbolFactory().newSymbol("E",2, ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SParser$stack.peek()), RESULT);
            }
          return CUP$SParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SParser$do_action(
    int                        CUP$SParser$act_num,
    java_cup.runtime.lr_parser CUP$SParser$parser,
    java.util.Stack            CUP$SParser$stack,
    int                        CUP$SParser$top)
    throws java.lang.Exception
    {
              return CUP$SParser$do_action_part00000000(
                               CUP$SParser$act_num,
                               CUP$SParser$parser,
                               CUP$SParser$stack,
                               CUP$SParser$top);
    }
}

}
